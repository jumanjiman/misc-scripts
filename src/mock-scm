#!/bin/env python
#
# A simple utility to integrate Mock with SCMs
#
# Copyright (C) 2010 Marko Myllynen <myllynen@redhat.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import subprocess
import tempfile
import optparse
import shutil
import shlex
import glob
import sys
import os

# Script version
VERSION = "0.1"

# Configuration
OUTPUT_DIR = "/tmp/mock-results"
SCM_GET_CVS = "cvs -d :ext:cvs.example.com:/srv/cvs co SCM_TAG PKG"
SCM_GET_GIT = "git clone SCM_TAG ssh://git.example.com/srv/git/PKG.git"
SRC_DIR = "/mnt/src"

RPMBUILD = 'rpmbuild --nodeps COMPAT --define "_sourcedir DIR" --define "_specdir DIR" --define "_builddir DIR/BUILD" --define "_srcrpmdir DIR/SRPMS" DIST -bs SPEC'
MOCK = "/usr/bin/mock CHROOT --resultdir=DIR DIST SRC_RPM"

# Command line parser
def parse_cmd_line():
    """Parse command line arguments"""
    usage = "%prog [options] <package>"
    parser = optparse.OptionParser(usage)
    parser.disable_interspersed_args()
    parser.description = "A simple utility to integrate Mock with SCMs"
    parser.add_option("-V", "--version", dest="version",
                      action="store_const", const=1, default=0,
                      help="show program's version number and exit")
    parser.add_option("-s", "--scm-type", dest="scm",
                      action="store", type="string", default="cvs",
                      help="SCM to use, currently supported: cvs (default), git")
    parser.add_option("-g", "--scm-get", dest="get",
                      help="SCM checkout command, " +
                      "CVS default: " + SCM_GET_CVS + ", " +
                      "Git default: " + SCM_GET_GIT)
    parser.add_option("-b", "--scm-branch", dest="tag",
                      help="SCM branch or tag")
    parser.add_option("-d", "--rpm-dist", dest="dist",
                      help="RPM dist tag")
    parser.add_option("-o", "--output-dir", dest="output",
                      action="store", type="string", default=OUTPUT_DIR,
                      help="output directory for RPMs, default: " + OUTPUT_DIR)
    parser.add_option("-t", "--temp-dir", dest="temp",
                      help="Dir to use instead of a generated one, not removed")
    parser.add_option("-r", "--mock-chroot", dest="chroot",
                      help="Mock chroot (-r) configuration")
    parser.add_option("-c", "--rpm-compat", dest="compat",
                      action="store_const", const=1, default=0,
                      help="run rpmbuild with compat flags for older RPM versions")
    parser.add_option("-v", "--verbose", dest="verbose",
                      action="store_const", const=1, default=0,
                      help="verbose execution")
    return parser.parse_args()

# Main
def main():
    """A simple utility to integrate Mock with SCMs"""
    (options, args) = parse_cmd_line()

    if options.version:
        print os.path.basename(sys.argv[0]) + " " + VERSION
        sys.exit(0)

    if len(args) != 1:
        print os.path.basename(sys.argv[0]) + ": incorrect number of arguments"
        sys.exit(1)

    pkg = args[0]

    # Generate temporary build directory and RPM output directory
    if options.temp:
        build_dir = options.temp
    else:
        build_dir = tempfile.mkdtemp(".mock-scm." + pkg)
    print "Using temporary directory: " + build_dir
    output_dir = OUTPUT_DIR
    if options.output:
        output_dir = options.output
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Generate SCM command to get files
    cmd = SCM_GET_CVS
    if options.scm == "cvs":
        cmd = SCM_GET_CVS
    elif options.scm == "git":
        cmd = SCM_GET_GIT
    else:
        raise Exception("SCM type %s not supported" % options.scm)
    if options.get:
        cmd = options.get
    if options.tag:
        if options.scm == "cvs":
            cmd = cmd.replace("SCM_TAG", "-r " + options.tag)
        elif options.scm == "git":
            cmd = cmd.replace("SCM_TAG", "-b " + options.tag)
        else:
            raise Exception("SCM type %s not supported" % options.scm)
    cmd = cmd.replace("SCM_TAG", "")
    cmd = cmd.replace("PKG", pkg)

    # External process output handling
    if options.verbose:
        output = None
    else:
        output = subprocess.PIPE

    # Get files from SCM
    args = shlex.split(cmd)
    r = subprocess.call(args, cwd=build_dir, stdout=output, stderr=subprocess.STDOUT)
    if r != 0:
        raise Exception("SCM command %s failed" % cmd)

    # Figure out the spec file
    spec = build_dir + "/" + pkg + "/" + pkg + ".spec"
    if not os.path.exists(spec):
        pkg_lc = pkg.lower()
        spec = build_dir + "/" + pkg + "/" + pkg_lc + ".spec"
    if not os.path.exists(spec):
        raise IOError("Can't find spec file %s" % spec)

    # Get possible external sources from SRC_DIR
    sources = []
    f = open(spec)
    for line in f:
        if line.startswith("Name:"):
            name = line.split()[1]
        if line.startswith("Version:"):
            version = line.split()[1]
        if line.startswith("Source"):
            sources.append(line.split()[1].replace("%{name}", name).replace("%{version}", version))
    f.close()
    for f in sources:
        f = f.split("/")[-1]
        if not os.path.exists(build_dir + "/" + pkg + "/" + f) and \
               os.path.exists(SRC_DIR + "/" + f):
            if options.verbose:
                print "Copying " + SRC_DIR + "/" + f + " to " + build_dir + "/" + pkg + "/" + f + "..."
            shutil.copy2(SRC_DIR + "/" + f, build_dir + "/" + pkg + "/" + f)

    # Build src.rpm
    if not os.path.exists(build_dir + "/" + pkg + "/" + "BUILD"):
        os.mkdir(build_dir + "/" + pkg + "/" + "BUILD")
    if not os.path.exists(build_dir + "/" + pkg + "/" + "SRPMS"):
        os.mkdir(build_dir + "/" + pkg + "/" + "SRPMS")
    rpmbuild = RPMBUILD.replace("DIR", build_dir + "/" + pkg)
    if options.compat:
        rpmbuild = rpmbuild.replace("COMPAT", '--define "_source_filedigest_algorithm 1" --define "_source_payload w9.gzdio"')
    rpmbuild = rpmbuild.replace("COMPAT", "")
    if options.dist:
        rpmbuild = rpmbuild.replace("DIST", '--define "dist .' + options.dist + '"')
    rpmbuild = rpmbuild.replace("DIST", "")
    rpmbuild = rpmbuild.replace("SPEC", spec)
    args = shlex.split(rpmbuild)
    r = subprocess.call(args, stdout=output, stderr=subprocess.STDOUT)
    if r != 0:
        raise Exception("rpmbuild command %s failed", rpmbuild)

    # Build from src.rpm
    mock = MOCK
    if options.chroot:
        mock = mock.replace("CHROOT", "-r " + options.chroot)
    mock = mock.replace("CHROOT", "")
    if options.dist:
        mock = mock.replace("DIST", '-D "dist .' + options.dist + '"')
    mock = mock.replace("DIST", "")
    mock = mock.replace("DIR", build_dir)
    src_rpm = glob.glob(build_dir + "/" + pkg + "/" + "SRPMS" + "/" + pkg + "-*.src.rpm")[0]
    mock = mock.replace("SRC_RPM", src_rpm)
    args = shlex.split(mock)
    r = subprocess.call(args, stdout=output, stderr=subprocess.STDOUT)
    if r != 0:
        raise Exception("mock command %s failed", mock)

    # Copy build results to destination directory
    if options.verbose:
        print "Copying build results to " + output_dir + ":"
    for f in glob.glob(build_dir + "/" + "*.rpm"):
        if options.verbose:
            print f
        shutil.copy2(f, output_dir)
    print "Build results are in: " + output_dir

    # Clean up
    if not options.temp:
        if options.verbose:
            print "All done, cleaning up."
        shutil.rmtree(build_dir)

if __name__ == "__main__":
    main()
