#!/usr/bin/env python

"""
sargather

Copyright 2011 Paul Morgan
jumanjiman@gmail.com

This software may be freely redistributed under the terms of the GNU
general public license.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
"""

import subprocess # facilitate calls to bash
import optparse   # CLI option handling
import re         # regex
import string     # string functions
import sys        # system-level primitives, such as err
import os         # work with files, dirs, etc.

# defaults
output_dir = "/tmp"

def run_bash (cmd):
	"""
	Runs a command, returning the return code, stdout, and stderr as a tuple.
	NOT FOR USE WITH INTERACTIVE COMMANDS.
	"""

	try:
		proc=subprocess.Popen (cmd, 
			shell=True, 
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
			close_fds=True
			)
		data=proc.communicate()
		return (proc.returncode, data[0], data[1])
	except (KeyboardInterrupt, SystemExit):
		print ""
		exit (1)
	except Exception, err:
		sys.stderr.write('error: %s\n' % str(err) )
		exit (1)

def sar_checks():
	"""
	definitions of sar checks that should be run
	"""
	# define tests as tuples
	# sar_option   description
	# ----------   -----------
	tests=(
	[ "-b",        "io"                  ],
	[ "-B",        "paging"              ],
	[ "-d",        "block_device"        ],
	[ "-q",        "runqueue"            ],
	[ "-r",        "memory"              ],
	[ "-R",        "rate_of_memory"      ],
	[ "-S",        "swap_capacity"       ],
	[ "-v",        "buffer_cache"        ],
	[ "-w",        "task_creation"       ],
	[ "-W",        "swap_rate"           ],
	[ "-y",        "serial_tty"          ],
	[ "-I SUM",    "interrupt_summary"   ],
	[ "-I XALL",   "interrupt_all"       ],
	[ "-n NFS",    "nfs_client"          ],
	[ "-n NFSD",   "nfs_server"          ],
	[ "-n DEV",    "network_dev"         ],
	[ "-n EDEV",   "network_errors"      ],
	[ "-n SOCK",   "network_sockets"     ],
	[ "-n IP",     "network_ip"          ],
	[ "-n EIP",    "network_ip"          ],
	[ "-n ICMP",   "network_icmp"        ],
	[ "-n EICMP",  "network_eicmp"       ],
	[ "-n TCP",    "network_tcp"         ],
	[ "-n ETCP",   "network_etcp"        ],
	[ "-n UDP",    "network_udp"         ],
	[ "-n SOCK6",  "network_sockets_ip6" ],
	[ "-n IP6",    "network_ip6"         ],
	[ "-n EIP6",   "network_eip6"        ],
	[ "-n ICMP6",  "network_icmp6"       ],
	[ "-n EICMP6", "network_eicmp6"      ],
	[ "-n UDP6",   "network_udp6"        ],
	[ "-u ALL",    "cpu_utilization"     ],
	[ "-P ALL",    "cpu_stats"           ]
	)
	return tests

# configure and run CLI parser
p = optparse.OptionParser (
	description = 'Gather sar data over a specified interval',
	prog = 'sargather',
	usage = '%prog [option]'
	)

p.add_option('--file', '-f', dest="filename",
	help="read data from FILE", metavar="FILE")

p.add_option('--start', '-s', dest="start_time",
	help="START in HH:MM:SS",
	metavar="START")

p.add_option('--end', '-e', dest="end_time",
	help="END in HH:MM:SS",
	metavar="END")

p.add_option('--dir', '-d', dest="output_dir",
	help="DIR in which to save output data", 
	default=output_dir,
	metavar="DIR")

# parse user options
(options, args) = p.parse_args()

# sanity-check
if options.start_time is None or options.end_time is None:
	p.print_help()
	exit(1)

# construct basic sar options
sar_options = "-s " + options.start_time + " -e " + options.end_time
if options.filename is not None:
	sar_options += " -f " + options.filename

if not os.path.exists (options.output_dir):
	try:
		os.makedirs (options.output_dir)
	except Exception, err:
		sys.stderr.write('error: %s\n' % str(err) )
		exit (1)

for tuple in sar_checks():
	try:
		output = run_bash ("LANG=C sar " + tuple[0] + " " + sar_options + " | grep -v Average | grep -v Linux | grep -v '^$'")
		print "======= %s =======" % tuple[1]
		if output[0] == 0:
			print "%s" % output[1]
		else:
			print "%s" % output[2]
	except (KeyboardInterrupt, SystemExit):
		print ""
		exit (1)
	except Exception, err:
		sys.stderr.write('error: %s\n' % str(err) )
		exit (1)
